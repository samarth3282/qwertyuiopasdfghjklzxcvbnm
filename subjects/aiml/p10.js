// subjects/os/p1.js
const express = require("express");
const router = express.Router();

// GET /os/p1
router.get("/", (req, res) => {
  const codeString = `
# %% [markdown]
# Date: 03 April, 2025
# 
# Practical No: 10
# 
# Name: Yashvi Jain
# 
# Roll No: 24BEE040
# 
# Aim: Can you implement XOR gate using a perceptron learning algorithm? Write a code and justify through reasoning and demonstration.

# %%
import numpy as np
from matplotlib import pyplot as plt #Fixed typo in import statement

X=np.array([[0,0],[0,1],[1,0],[1,1]]) #Fixed array initialization
Y=np.array([0,1,1,0])
plt.scatter(x=X[:,0],y=X[:,1],c=Y)
plt.show()
n_samples=X.shape[0]
n_features=X.shape[1]
w=np.random.uniform(0,1,size=n_features)
b=np.random.uniform(0,1,1)
n_epoch=int(input("Enter Number of epochs:"))
lr=0.01
for e in range(n_epoch): #epoch loop
    for s in range(n_samples):#Update after every presentation, so can't do away with this loop
        net=np.dot(X[s,:],w)+b
        if net >=0:
            a=1
        else: #Corrected indentation for else block
            a=0
        error=Y[s]-a
        w=w+lr*error*X[s,:]
        b=b+lr*error
m=-w[0]/w[1]
c=-b/w[1]

#function to plot decison boundary along with train points
#notice that the line is not able to separate data points
def plot_decision_boundary(X):
    for x in np.linspace(np.min(X[:,0]),np.max(X[:,0])): #default
    #50 points are generated by linspace
        y=m*x+c
        plt.plot(x,y,linestyle='-', color='k', marker='.')
    plt.scatter(X[:,0], X[:,1], c=Y)
    plt.show()
plot_decision_boundary(X)

# %%




  `;
  res.json({ code: codeString });
});

module.exports = router;
